# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    # We will test by default on all pushes, EXCEPT those that become part of a pull request.
    branches-ignore:
      - 'refs/heads/pull/**' # Excludes branches that are part of a pull request
      - 'main' # Or any other branch you want to exclude from direct push builds if it's handled by PRs
    paths-ignore:
      - 'README.md'
      - 'VERSIONS.md'
      - '.gitignore'
  pull_request:
    branches:
      - '*' # Triggers for all PRs targeting any branch (presumably 99% of all PRs will target 'main')


permissions:
  contents: write

jobs:
  test:

    runs-on: ubuntu-latest
    strategy:
      # By default, GitHub will maximize the number of jobs run in parallel
      # depending on the available runners on GitHub-hosted virtual machines.
      # max-parallel: 8
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.13"]
        # Explicitly quote the version string (see https://github.com/actions/runner/issues/1989),
        # or else 3.10 specifically will be read as 3.1

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "0.8.14"
        activate-environment: true
        python-version: ${{ matrix.python-version }}
        enable-cache: true
        ignore-nothing-to-cache: true
        prune-cache: false
        cache-dependency-glob: |
          **/uv.lock
          **/pyproject.toml

    - name: Report if the cache was restored
      if: steps.setup-uv.outputs.cache-hit == 'true'
      run: echo "Cache was restored"

    - name: Report if the cache was NOT restored
      if: steps.setup-uv.outputs.cache-hit != 'true'
      run: echo "Cache was NOT restored"

    - name: Display Python version
      run: python -c "import sys; print(sys.version)"

    - name: Run ruff formatter (only on most recent Python version)
      if: ${{ matrix.python-version == '3.13' }}
      uses: astral-sh/ruff-action@v3
      with:
        version: "latest"
        args: "format"

    - name: Detect changed files during a Workflow run and commit them back to the repository
      uses: stefanzweifel/git-auto-commit-action@v6
      with:
        commit_message: 'automatic style fixes by ruff'

    - name: Install the project
      run: uv sync --all-extras --dev

    - name: Test with pytest
      run: pytest

    - name: Run mypy to check type annotations
      if: ${{ matrix.python-version == '3.13' }}
      run: mypy mass2

# TO DO: generate docs automatically and deploy them.
#
# The following comes from the old bitbucket-pipelines.yml.
# It shows how to make and deploy documentation. We'll need to use pages.nist.gov when we re-enable this.
# - pip install recommonmark sphinx
# - cd doc
# - make clean
# - make doctest
# - make html
# - git config --global user.email "galen.oneil@nist.gov"
# - git config --global user.name "Bitbucket Pipeline Doc Deploy"
# - ./deploy_docs_bitbucket.sh $BITBUCKET_BRANCH
