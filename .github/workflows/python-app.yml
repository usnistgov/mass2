# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    # branches: [ "main" ]
    # If you don't have a "branches: [...]" entry here, the action runs on any push.
    # At first, we ran actions only on main pushes, but let's try all branches as of Aug 15, 2025
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:

    runs-on: ubuntu-latest
    strategy:
      # By default, GitHub will maximize the number of jobs run in parallel
      # depending on the available runners on GitHub-hosted virtual machines.
      # max-parallel: 8
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.13"]
        # Explicitly quote the version string (see https://github.com/actions/runner/issues/1989), or 3.10 specifically will be read as 3.1

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        python-version: ${{ matrix.python-version }}
        # Cache wasn't working. Need a better understanding before we turn this on:
        # enable-cache: true

    - name: Display Python version
      run: python -c "import sys; print(sys.version)"

    - name: Run ruff formatter (only on most recent Python version)
      if: ${{ matrix.python-version == 3.13 }}
      uses: astral-sh/ruff-action@v3
      with:
        args: "format"

    - name: Detect changed files during a Workflow run and commit them back to the repository
      uses: stefanzweifel/git-auto-commit-action@v6
      with:
        commit_message: 'automatic style fixes by ruff'

    - name: Install the project
      run: uv sync --all-extras --dev

    - name: Test with pytest
      run: pytest

    # TODO: make doctests work again
    # - name: Run doctests (only on most recent Python version)
    #   if: ${{ matrix.python-version == 3.13 }}
    #   run: |
    #     uv sync --all-extras --group docs
    #     cd doc
    #     uv run make clean
    #     uv run make doctest

# TO DO: generate docs automatically and deploy them.
#
# The following comes from the old bitbucket-pipelines.yml.
# It shows how to make and deploy documentation. We'll need to use pages.nist.gov when we re-enable this.
# - pip install recommonmark sphinx
# - cd doc
# - make clean
# - make doctest
# - make html
# - git config --global user.email "galen.oneil@nist.gov"
# - git config --global user.name "Bitbucket Pipeline Doc Deploy"
# - ./deploy_docs_bitbucket.sh $BITBUCKET_BRANCH
